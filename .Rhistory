ggplot(month, aes(month, stat=transactions, group=channelGrouping,colour=channelGrouping))+
geom_bar()
ggplot(month, aes(month, conversion_rate, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month, aes(month, transactions, group=channelGrouping,colour=channelGrouping))+
geom_line()
month<-month[-which(month[,'channelGrouping']=='Display'),]
if month$channelGrouping==c('Other Advertising','Display','Email','Paid Search','Social','(Other)') data$channelGrouping<-'other'
if month$channelGrouping in c('Other Advertising','Display','Email','Paid Search','Social','(Other)') data$channelGrouping<-'other'
if which (month$channelGrouping == c('Other Advertising','Display','Email','Paid Search','Social','(Other)') )data$channelGrouping<-'other'
if month$channelGrouping %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') data$channelGrouping<-'Other'
if month[,'channelGrouping'] %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') data$channelGrouping<-'Other'
month$channelGrouping %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)')
if month$channelGrouping %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') {
data$channelGrouping<-'Other'
}
if (month$channelGrouping %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
data$channelGrouping<-'Other'
}
if (month$channelGrouping %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)')==T ){
data$channelGrouping<-'Other'
}
sapply(month$channelGrouping, function(x) if (x %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
data$channelGrouping<-'Other'
})
sapply(month$channelGrouping, function(x) if (x %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
x<-'Other'
})
data<-google_analytics('184190899', date_range = c("2019-07-01", "2020-04-19"),
metrics = c('users','sessions','transactions','transactionRevenue','transactionsPerSession'),
dimensions = c('date','channelGrouping'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = NULL,
pivots = NULL, cohorts = NULL, max = 10000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = FALSE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
data$month<-format(as.Date(data$date), "%Y-%m")
month<-data%>%group_by(month, channelGrouping)%>%
summarise(
users=sum(users),
sessions=sum(sessions),
transactions=sum(transactions),
revenue=sum(transactionRevenue),
conversion_rate=sum(transactions)/sum(sessions)*100
)
sapply(month$channelGrouping, function(x) if (x %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
x<-'Other'
})
View(month)
other<-function(x){ if (x %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
x<-'Other'
}
}
other<-function(x){ if (x %in% c('Other Advertising','Display','Email','Paid Search','Social','(Other)') ){
x<-'Other'
return(x)
}
}
lappy(month$channelGrouping,other )
lapply(month$channelGrouping,other )
test<-lapply(month$channelGrouping,other )
View(test)
library(googleAnalyticsR)
library(ggplot2)
library(scales)
library(dplyr)
data<-google_analytics('184190899', date_range = c("2019-07-01", "2020-04-19"),
metrics = c('users','sessions','transactions','transactionRevenue','transactionsPerSession'),
dimensions = c('date','channelGrouping'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = NULL,
pivots = NULL, cohorts = NULL, max = 10000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = FALSE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
data$month<-format(as.Date(data$date), "%Y-%m")
month<-data%>%group_by(month, channelGrouping)%>%
summarise(
users=sum(users),
sessions=sum(sessions),
transactions=sum(transactions),
revenue=sum(transactionRevenue),
conversion_rate=sum(transactions)/sum(sessions)*100
)
month[month$channelGrouping %in% c('(Other)','Display','Other Advertising','Paid Search'),'channelGrouping']<-'Other'
month<-month%>%group_by(month, channelGrouping)%>%
summarise(
users=sum(users),
sessions=sum(sessions),
transactions=sum(transactions),
revenue=sum(revenue),
conversion_rate=sum(transactions)/sum(sessions)*100
)
#month_plot<-function(x){
#  p<-ggplot(month, aes(month, x, group=channelGrouping,colour=channelGrouping))+
#  geom_line()
# print(p)
#  return(p)
#}
#lapply(colnames(month), month_plot)
ggplot(month[39:65,], aes(month, users, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[39:65,], aes(month, sessions, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[39:65,], aes(month, transactions, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[39:65,], aes(month, revenue, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[39:65,], aes(month, conversion_rate, group=channelGrouping,colour=channelGrouping))+
geom_line()
sum()
product<-google_analytics('184190899', date_range = c("2019-08-01", "2020-04-19"),
metrics = c('uniquePurchases','itemRevenue'),
dimensions = c('date','productName','channelGrouping'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = NULL,
pivots = NULL, cohorts = NULL, max = 1000000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = TRUE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
product$month<-format(as.Date(product$date), "%Y-%m")
product[grepl('(tuf|rog)',product$productName,ignore.case = T),'producttype']<-'Gaming'
product[grepl('zenbook',product$productName,ignore.case = T),'producttype']<-'zenbook'
product[grepl('zenfone',product$productName,ignore.case = T),'producttype']<-'zenFone'
product[grepl('vivo',product$productName,ignore.case = T),'producttype']<-'vivobook'
product[grepl('chrome',product$productName,ignore.case = T),'producttype']<-'chromebook'
product[grepl('ROG phone',product$productName,ignore.case = T),'producttype']<-'Gaming phone'
product[is.na(product$producttype),'producttype']<-'other'
product_all<-product%>%
group_by(month, producttype)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
ggplot(product_all, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
product<-google_analytics('184190899', date_range = c("2020-01-01", "2020-04-19"),
metrics = c('uniquePurchases','itemRevenue'),
dimensions = c('date','productName','channelGrouping'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = NULL,
pivots = NULL, cohorts = NULL, max = 1000000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = TRUE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
product$month<-format(as.Date(product$date), "%Y-%m")
product[grepl('(tuf|rog)',product$productName,ignore.case = T),'producttype']<-'Gaming'
product[grepl('zenbook',product$productName,ignore.case = T),'producttype']<-'zenbook'
product[grepl('zenfone',product$productName,ignore.case = T),'producttype']<-'zenFone'
product[grepl('vivo',product$productName,ignore.case = T),'producttype']<-'vivobook'
product[grepl('chrome',product$productName,ignore.case = T),'producttype']<-'chromebook'
product[grepl('ROG phone',product$productName,ignore.case = T),'producttype']<-'Gaming phone'
product[is.na(product$producttype),'producttype']<-'other'
product_organic<-product%>%
filter(channelGrouping == "Organic Search") %>%
group_by(month, producttype)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
ggplot(product_organic, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
product_Affiliate<-product%>%
filter(channelGrouping == "Affiliates") %>%
group_by(month, producttype)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
ggplot(product_Affiliate, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
ggplot(product_all, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
View(product_all)
ggplot(product_all[36:63,], aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
View(product_all)
product_organic<-product%>%
filter(channelGrouping == "Organic Search") %>%
group_by(month, producttype)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
View(product)
View(product_organic)
View(product_Affiliate)
View(month)
ggplot(month[38:65,], aes(month, users, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[38:65,], aes(month, sessions, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[38:65,], aes(month, transactions, group=channelGrouping,colour=channelGrouping))+
geom_line()
ggplot(month[38:65,], aes(month, conversion_rate, group=channelGrouping,colour=channelGrouping))+
geom_line()
affiliates<-google_analytics('184190899', date_range = c("2020-01-01", "2020-04-19"),
metrics = c('uniquePurchases','itemRevenue'),
dimensions = c('date','productName','source'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = 'channelGrouping==Affiliates',
pivots = NULL, cohorts = NULL, max = 1000000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = TRUE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
affiliates<-google_analytics('184190899', date_range = c("2020-01-01", "2020-04-19"),
metrics = c('uniquePurchases','itemRevenue'),
dimensions = c('date','productName','source'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = 'ga:channelGrouping==Affiliates',
pivots = NULL, cohorts = NULL, max = 1000000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = TRUE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
?google_analytics
affiliate<-segment_ga4('affiliates', segment_id = 'gaid::9lccyvxLT1q-9HFbqlZllA')
affiliates<-google_analytics('184190899', date_range = c("2020-01-01", "2020-04-19"),
metrics = c('uniquePurchases','itemRevenue'),
dimensions = c('date','productName','source'), dim_filters = NULL, met_filters = NULL,
filtersExpression = NULL, order = NULL, segments = affiliate,
pivots = NULL, cohorts = NULL, max = 1000000,
samplingLevel = "DEFAULT", metricFormat = NULL,
histogramBuckets = NULL, anti_sample = TRUE,
anti_sample_batches = "auto", slow_fetch = FALSE,
useResourceQuotas = NULL, rows_per_call = 10000L)
View(affiliates)
affiliates$month<-format(as.Date(affiliates$date), "%Y-%m")
affiliates[grepl('(tuf|rog)',affiliates$productName,ignore.case = T),'producttype']<-'Gaming'
affiliates[grepl('zenbook',affiliates$productName,ignore.case = T),'producttype']<-'zenbook'
affiliates[grepl('zenfone',affiliates$productName,ignore.case = T),'producttype']<-'zenFone'
affiliates[grepl('vivo',affiliates$productName,ignore.case = T),'producttype']<-'vivobook'
affiliates[grepl('chrome',affiliates$productName,ignore.case = T),'producttype']<-'chromebook'
affiliates[grepl('ROG phone',affiliates$productName,ignore.case = T),'producttype']<-'Gaming phone'
affiliates[is.na(affiliates$producttype),'producttype']<-'other'
View(affiliates)
Affiliate_performance<-product%>%
group_by(month, source)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
Affiliate_performance<-affiliates%>%
group_by(month, source)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
View(Affiliate_performance)
nrow(unique(Affiliate_performance$source))
nrow(factor(Affiliate_performance$source))
factor(Affiliate_performance$source)
levels(factor(Affiliate_performance$source))
temp<-Affiliate_performance[which(Affiliate_performance$uniquePurchases>1),]
View(temp)
Affiliate_performance<-affiliates%>%
group_by(source)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
View(Affiliate_performance)
sum(Affiliate_performance$uniquePurchases)
Affiliate_no1<-affiliates%>%
filter(source == "980781") %>%
group_by(month, producttype)%>%
summarise(
uniquePurchases=sum(uniquePurchases),
revenue=sum(itemRevenue)
)
affiliates%>%
filter(source == "980781") %>%
ggplot(affiliates, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
affiliates%>%
filter(source == "980781") %>%
ggplot(., aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
View(Affiliate_no1)
ggplot(Affiliate_no1, aes(month, uniquePurchases, group=producttype,colour=producttype))+
geom_line()
library(dplyr)
library(ggplot2)
coonvid_19<-read.csv('State_Convid-19.csv')
coonvid_19<-read.csv('State_Convid-19.csv')
View(coonvid_19)
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
View(convid_19)
View(convid_19)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(Date=distinct(Date), total_pos=sum(Positive))
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
View(convid_19)
typeof(convid_19$Positive)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(convid_19$Positive))
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(as.numeric(convid_19$Positive)))
View(convid_19_total)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%
View(convid_19_total)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)
View(convid_19_total)
View(convid_19_total)
convid_19<-as.numeric(convid_19[,2:8])
?apply
convid_19<-apply(convid_19[,2:8],2,as.numeric)
View(convid_19)
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
convid_19[,2:8]<-apply(convid_19[,2:8],2,as.numeric)
View(convid_19)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum())
View(convid_19_total)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
View(convid_19_total)
convid_19[,'Day']<-apply(convid_19[,1],1,strsplit)
convid_19[,'Day']<-lpply(convid_19[,1],1,function(x) strsplit(x,'')[1])
convid_19[,'Day']<-lapply(convid_19[,1],1,function(x) strsplit(x,'')[1])
strsplit(convid_19[1,1],'')[1]
strsplit(convid_19[1,1],' ')[1]
strsplit(convid_19[1,1],' ')
typeof(convid_19$Date)
convid_19[,1]<-as.Date(convid_19[,1])
convid_19[,1]<-as.Date(as.character(convid_19[,1]))
convid_19[,1]<-as.character(convid_19[,1])
as.Date(convid_19[1,1],format='%m/%d/%Y')
substring(convid_19[1,1], 5, nchar(convid_19[1,1]))
convid_19[,1]<-asubstring(convid_19[,1], 5, nchar(convid_19[,1]))
convid_19[,1]<-substring(convid_19[,1], 5, nchar(convid_19[,1]))
as.Date(convid_19[1,1],format='%m/%d/%Y')
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
as.Date(convid_19[1,1],format='%m/%d/%Y')
convid_19[1,1]
as.POSIXct(convid_19[,1], format = '%d%b%Y')
as.Date(convid_19[,1], format = '%d%b%Y')
as.Date(convid_19[1,1], format = '%d%b%Y')
strptime(convid_19[1,1], format = '%d%b%Y')
strptime(convid_19[1,1], format = '%d/%b/%Y')
strptime(convid_19[1,1], format = '%m/%d/%Y')
as.POSIXct(convid_19[1,1], format = '%m/%d/%Y')
convid_19[1,1]
?replace
convid_19[,1]<-paste(substring(convid_19[,1], 5, 10),',',substring(convid_19[,1], 11, nchar(convid_19[,1]))
convid_19[,1]<-paste(substring(convid_19[,1], 5, 10),',',substring(convid_19[,1], 11, nchar(convid_19[,1])))
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
convid_19[,2:8]<-apply(convid_19[,2:8],2,as.numeric)
convid_19[,1]<-as.character(convid_19[,1])
substring(convid_19[,1], 5, 10)
substring(convid_19[,1], 11, nchar(convid_19[,1])
)
convid_19[,1]<-paste0(substring(convid_19[,1], 5, 10),',',substring(convid_19[,1], 11, nchar(convid_19[,1])))
as.POSIXct(convid_19[1,1], format = '%m/%d/%Y')
as.Date(convid_19[1,1],format='%B %d, %Y')
as.Date(convid_19[1,1],format='%B %d ,%Y')
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
convid_19[,2:8]<-apply(convid_19[,2:8],2,as.numeric)
convid_19[,1]<-as.character(convid_19[,1])
convid_19[,1]<-substring(convid_19[,1], 5, nchar(convid_19[,1]))
as.POSIXct(convid_19[1,1], format = '%m %d %Y')
as.POSIXct(convid_19[1,1], format = '%m %-d %Y')
as.Date(convid_19[1,1], format = '%m %-d %Y')
convid_19[1,1]
as.Date(convid_19[1,1], format = '%m %-d %Y ')
as.Date('May 9 2020 ', format = '%m %-d %Y ')
as.Date('May 9 2020 ', format = '%b %-d %Y ')
as.Date('May 9 2020', format = '%b %-d %Y ')
as.Date('May 9 2020', format = '%b %-d %Y')
as.Date('May 09 2020', format = '%b %d %Y')
as.Date('May 09, 2020', format = '%b %d, %Y')
as.Date('May 09, 2020')
as.Date('May 09, 2020', format = '%b %d, %Y')
as.Date('May/09/2020', format = '%b/%d/%Y')
as.Date('May092020', format = '%b%d%Y')
xstrptime('May 09, 2020', format = '%b %d, %Y')
strptime('May 09, 2020', format = '%b %d, %Y')
strptime('May 09 2020', format = '%b %d %Y')
convid_19[,1]<-as.string(convid_19[,1])
as.Date('May 09 2020', format = '%b %d %Y')
as.Date.POSIXct('May 09 2020', format = '%b %d %Y')
as.Date('20020102', format = '%Y%b%d')
as.Date('20020102', format = '%Y%m%d')
as.Date('May 09 2020', format = '%b %d %Y')
as.Date('May-09-2020', format = '%b-%d-%Y')
as.Date('May-09', format = '%b-%d')
strftime('May-09-2020', format = '%b-%d-%Y')
strftime('May-09-2020', format = '%b-%d-%Y',tz=tz)
strftime('May-09-2020', format = '%b-%d-%Y',usetz=F)
format('May-09-2020', format = '%b-%d-%Y',usetz=F)
format(convid_19[,1], format = '%b-%d-%Y',usetz=F)
strftime('May-09-2020', format = '%b-%d-%Y',usetz=F)
strftime('May-09-2020', format = '%b-%d-%Y',usetz=F)
as.Date('April 26, 2001',format='%B %d, %Y')
rmat='%d%b%y')
as.Date('22JUN01',format='%d%b%y')
strftime(convid_19[,1], format = '%b-%e-%Y',usetz=F)
strftime(convid_19[,1], format = '%b %e %Y',usetz=F)
strftime(convid_19[1,1], format = '%b %e %Y',usetz=F)
convid_19[1,1]
strptime(convid_19[1,1], format = '%b %e %Y',usetz=F)
strptime(convid_19[1,1], format = '%b %e %Y')
as.Date('9 May 2020')
as.Date('April 26 2001',format='%B %d %Y')
library(lubridate)
install.packages("lubridate")
data$created_date1 <- mdy_hm(convid_19[,1])
library(lubridate)
data$created_date1 <- mdy_hm(convid_19[,1])
data$created_date1 <- mdy_hm(convid_19$Date)
as.POSIXct("5-JAN-15", format="%d-%h-%y", tz="GMT")
as.POSIXct("5-JAN-15", format="%d-%h-%y")
as.POSIXct("5-JAN-15", format="%d-%b-%y")
as.POSIXct("5-JAN-15", format="%d-%b-%y", tz="GMT")
as.Date('22JUN01',format='%d%b%y', tz='HST')
Sys.getlocale()
as.Date('22JUN01',format='%d%b%y', tz='UTF-8')
Sys.getlocale("LC_TIME")
as.Date('22JUN01',format='%d%b%y', tz='zh_TW.UTF-8')
as.Date('April 26 2001',format='%B %d %Y', tz='zh_TW.UTF-8')
as.POSIXct("5-JAN-15", format="%d-%b-%y")
as.Date('Apr 26 2001',format='%b %d %Y', tz='zh_TW.UTF-8')
Sys.setlocale("LC_TIME", lct)
Sys.setlocale("LC_TIME", "C")
as.Date('Apr 26 2001',format='%b %d %Y')
as.Date(convid_19[1,1],format='%b %-d %Y')
as.Date(convid_19[1,1],format='%b %d %Y')
convid_19[,1]<-as.Date(convid_19[,1],format='%b %d %Y')
View(convid_19)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
library(dplyr)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
View(convid_19)
if is.na(convid_19) <-0
convid_19[is.na(convid_19)]<-0
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive))
View(convid_19_total)
convid_19<-read.csv('State_Convid-19.csv')
convid_19<-convid_19[,-1]
View(convid_19)
convid_19[,2:8]<-apply(convid_19[,2:8],2,as.numeric)
convid_19[,1]<-as.character(convid_19[,1])
convid_19[,1]<-substring(convid_19[,1], 5, nchar(convid_19[,1]))
Sys.setlocale("LC_TIME", "C")
convid_19[,1]<-as.Date(convid_19[,1],format='%b %d %Y')
convid_19[is.na(convid_19)]<-0
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive),
total_neg=sum(Negative),
total_new=)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive),
total_neg=sum(Negative),
total_new=sum(New.Tests),)
View(convid_19_total)
# whole USA - cum_cases vs. date
convid_19_total<- convid_19 %>% group_by(Date)%>%
summarise(total_pos=sum(Positive),
total_neg=sum(Negative),
total_new=sum(New.Tests),
total_hos=sum(Hospitalized),
total_death=sum(Deaths))
ggplot(convid_19_total,aes(Date, total_pos))+
geom_line()
library(ggplot2)
ggplot(convid_19_total,aes(Date, total_pos))+
geom_line()
ggplot(convid_19_total,aes(Date, total_neg))+
geom_line()
ggplot(convid_19_total,aes(Date, New.Tests))+
geom_line()
ggplot(convid_19_total,aes(Date, total_new))+
geom_line()
ggplot(convid_19_total,aes(Date, Hospitalized))+
geom_line()
ggplot(convid_19_total,aes(Date, total_hos))+
geom_line()
ggplot(convid_19_total,aes(Date, total_death))+
geom_line()
View(convid_19)
